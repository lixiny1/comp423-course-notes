{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lixin's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"tutorials/go-setup/","title":"Setting Up a Dev Container for Go","text":"<p>Primary author: Lixin Yang (https://github.com/lixiny1)</p> <p>Reviewer: Ezra Heinberg (https://github.com/ezra45)</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/go-setup/#software-requirements","title":"Software Requirements","text":"<ul> <li>Create a Github account and make sure Git is installed</li> <li>Install Visual Studio Code</li> <li>Install Docker and make sure it's running</li> </ul>"},{"location":"tutorials/go-setup/#basic-knowledge","title":"Basic Knowledge","text":"<ul> <li>Make sure to be familiar with command line basics! (COMP 211)</li> <li>Some basic understanding of Go and its syntax would be useful</li> </ul>"},{"location":"tutorials/go-setup/#part-1-creating-a-new-directory","title":"Part 1: Creating a New Directory","text":"<ol> <li>Open a terminal on your laptop</li> <li>Create a new blank directory and switch to it: <pre><code>mkdir hello-comp423\ncd hello-comp423\n</code></pre></li> <li>Initialize a new Git repository. This will initialize your folder with a new, empty repository! <pre><code>git init\n</code></pre></li> <li> <p>Create a remote repository in Github (instructions by Kris Jordan)</p> <ul> <li>Log into your Github account and go to the Create a New Repository page</li> <li> <p>Fill in these details:</p> <ul> <li>Repository Name: <code>go-tutorial</code></li> <li>Description: \"A short program written in Go!\"</li> <li>Visibility: Public</li> </ul> </li> <li> <p>Click Create Repository.</p> </li> </ul> </li> <li> <p>Link your Local Repository to GitHub</p> </li> </ol> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-tutorial.git\n</code></pre> <ul> <li> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> </li> <li> <p>Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <code>git branch -m main</code>.</p> </li> <li> <p>Push your local commits to the GitHub repo:</p> </li> </ul> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Info</p> <p>What is <code>--set-upstream</code>?</p> <p><code>git push --set-upstream origin main</code> pushes the main branch to the remote repository origin. The <code>--set-upstream</code> flag sets up the main branch to track the remote branch, meaning future pushes and pulls can be done without specifying the branch name and just writing <code>git push origin</code> when working on your local <code>main</code> branch. The corresponding short flag is <code>-u</code>.</p> <ul> <li>In your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use <code>git log</code> locally to see the commit ID and message which should match the ID of the most recent commit on GitHub.</li> </ul>"},{"location":"tutorials/go-setup/#part-2-creating-a-dev-container","title":"Part 2: Creating a Dev Container","text":"<ol> <li>Open up the newly created <code>hello-comp423</code> directory in VS Code through File -&gt; Open Folder</li> <li>Press <code>Ctrl-Shift-P</code> (or <code>Cmd-Shift-P</code> if on Mac) and search for Dev Containers: Add Dev Container Configuration Files</li> <li>Select Add configuration to workspace and select Go from the dropdown menu. This will add a <code>devcontainer.json</code> file to your folder!</li> </ol>"},{"location":"tutorials/go-setup/#part-3-configuring-the-dev-container-file","title":"Part 3: Configuring the Dev Container File","text":"<ol> <li>Take a look at the <code>devcontainer.json</code> file.<ul> <li>\"name\" refers to the name of your Dev Container. In this case, the name is \"Go Dev Container\".</li> <li>\"image\" refers to the base image from Microsoft with Go installed.</li> <li>Under extensions, we specify for the <code>golang.go</code> VSCode plugin to be installed. This will allow us to work with <code>.go</code> files within VSCode.</li> <li>\"postCreateCommand\" will run <code>go version</code> and tell you what version of Go is running after you create the container and run this file.</li> <li>Here is an example of what your <code>devcontainer.json</code> file should look like: <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:1-bullseye\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"golang.go\"\n            ]\n        }\n    },\n    \"postCreateCommand\": \"go version\"\n}\n</code></pre></li> </ul> </li> </ol> <p>Note</p> <p>Make sure to double check that you are installing the official Go VSCode Plugin! The code above should download the correct version.</p>"},{"location":"tutorials/go-setup/#part-4-creating-go-module","title":"Part 4: Creating Go Module","text":"<ol> <li>Open up a terminal in VSCode within the Dev Container and run the following command: <pre><code>go mod init hello-comp423\n</code></pre> This command sets up the current directory as the root of a new Go module. The <code>go.mod</code> file is the center of this module and allows you to modify any dependencies that you may have.</li> </ol>"},{"location":"tutorials/go-setup/#part-5-creating-your-first-program","title":"Part 5: Creating Your First Program!","text":"<ol> <li>Within your dev container, create a new directory called docs. This is where we will be storing our Go programs. <pre><code>mkdir docs\ncd docs\n</code></pre></li> <li>Create a new Go file called main.go within the docs directory. This file will contain our first Go program! <pre><code>touch main.go\n</code></pre></li> </ol> <p>Note</p> <p>The main package in Go is special because it defines the entry point into the program.</p> <ol> <li> <p>Navigate to the main.go file. </p> <ul> <li> <p><code>package main</code> describes the package your code is in</p> </li> <li> <p><code>fmt</code> is a package that we are instructing to install when this program runs. fmt is a standard library package in Go used in formatting I/O, such as printing to a console.</p> </li> <li> <p><code>func main</code> describes the main function within this particular Go program. <code>func</code> is the function declaration keyword, and <code>main</code> is the name of the function that are running. </p> </li> <li><code>fmt.Println(\"Hello COMP423)</code> will utilize the <code>fmt</code> package you downloaded to print \"Hello COMP 423\" to your console as output.  <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></li> </ul> </li> <li> <p>Verify your Go version with the following command in your terminal to make sure that you're running the correct version <pre><code>go version\n</code></pre></p> </li> <li> <p>Open up the terminal and run the main.go program with the following command: <pre><code>go run main.go\n</code></pre> Congratulations! You just wrote and ran your first Go program! However, we do have a few more things to cover.</p> </li> <li> <p>Run the following line of code in your terminal: <pre><code>go build -o hello\n</code></pre> Previously, running <code>go run main.go</code> simultaneously compiled and executed your program in 1 step. This is nice for testing, but doesn't leave behind a compiled binary file that you can distribute and run on any compatible system that doesn't have Go downloaded. To do that, we need the build command. The above line of code (build) will generate your main.go program into an executable file named <code>hello</code>. </p> </li> </ol> <p>Now you have an executable file of your first Go program!</p>"}]}